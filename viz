---
title: "BusinessAnalytics"
author: "Salcido"
date: '2022-12-01'
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r}
library(shiny)
library(janitor)
library(dplyr)
library(DT)
library(stringr)
library(naniar)
library(tibble)
library(sass)
library(ggplot2)
library(foreign) # for importing the Stata v12 dataset
library(dplyr)
library(tidyverse) # has drop_na() function
library(ggplot2)
library(scales) # percent function
library(randomForest)
library(varImp)
library(pROC)
library(mlbench)
library(caret)
library(vctrs)
library(sm)
library(cowplot)
```

Load Data
```{r}
gk<- read.csv('https://raw.githubusercontent.com/AlonsoSalcido/BusinessAnalytics/main/GK.csv', fileEncoding="UTF-8-BOM")
kicker<- read.csv('https://raw.githubusercontent.com/AlonsoSalcido/BusinessAnalytics/main/Kicker.csv', fileEncoding="UTF-8-BOM")
shootouts<- read.csv('https://raw.githubusercontent.com/AlonsoSalcido/BusinessAnalytics/main/WorldCupShootouts.csv', fileEncoding="UTF-8-BOM")
zones<- read.csv('https://raw.githubusercontent.com/AlonsoSalcido/BusinessAnalytics/main/Zones.csv', fileEncoding="UTF-8-BOM")
```
Clean Dataset
```{r}
shootouts[shootouts == ""] <- NA
shootouts$Zone<- as.factor(shootouts$Zone)
shootouts$Foot<- as.factor(shootouts$Foot)
shootouts$Keeper<- as.factor(shootouts$Keeper)
shootouts$OnTarget<- as.factor(shootouts$OnTarget)
shootouts$Elimination<- as.factor(shootouts$Elimination)
shootouts$Goal<- as.factor(shootouts$Goal)
zones$Zone<- as.factor(zones$Zone)
zones$Side<- as.factor(zones$Side)
```


```{r}
# Find Winner of Each Game
df<- as.data.frame(shootouts[shootouts$Goal==1,])
winner<- df %>%
      group_by(Game_id, Team) %>%
      summarize(Goal = n())
winner<- winner %>%
        group_by(Game_id) %>%
        filter(Goal == max(Goal, na.rm=TRUE))
winner$winner<- winner$Team
winner<- as.data.frame(winner[c(1,2,4)])




# Findout Which Team Shot First
first<- as.data.frame(shootouts[shootouts$Penalty_Number==1,])
first$first_shooter<- first$Team
first<- first[c(1,10)]

winner<-merge(x = winner, y = first, by = "Game_id", all = TRUE)

winner$winnerPos<- ifelse(winner$winner==winner$first_shooter, "first","second")
dims = dim(winner %>% drop_na(winner))

results = winner %>% drop_na(winner) %>% # drop missing values
    group_by(winnerPos) %>%  # specify categorical variable
    summarize(Frequency = n()) %>% # return counts / frequencies
    mutate(Percent = paste0(round(Frequency / dims[1] * 100, 2), "%")) # percentages

#Plot
ggplot(results, aes(x = "", y = Frequency, fill = winnerPos)) +
    geom_col(position = "stack", orientation = "x") + # this plots a stacked bar chart
     coord_polar(theta = "y") + 
 theme_void() + # these theme removes the lines around the chart and the grey background
    geom_text(aes(label = percent(Frequency/dims[1])), position = position_stack(vjust=0.5))+
  ggtitle("Distribution of Winning Teams Shooting First or Second")+
  scale_fill_manual(values=c("#ed1c23","#0660a9"))
```

```{r}
# Find Winner of Each Game
df<- as.data.frame(shootouts[shootouts$Goal==1,])
results<- df %>%
      group_by(Game_id, Team) %>%
      summarize(Goal = n())
winner<- results %>%
        group_by(Game_id) %>%
        filter(Goal == max(Goal, na.rm=TRUE))
winner$winner<- winner$Team
winner<- winner[c(1,3,4)]
results<- merge(x = results, y = winner, by = "Game_id", all = TRUE)


#missed penalties
df<- as.data.frame(shootouts[shootouts$Goal==0,])
missed<- df %>%
      group_by(Game_id, Team) %>%
      summarize(Missed = n())
results<- merge(x = results, y = missed, by = c("Game_id","Team"), all = TRUE)
results[is.na(results)] <- 0
loser_stats<- results %>% filter(Team != winner)
loser_stats<- loser_stats[c(1,2,6)]
#write.csv(loser_stats, "C:\\Users\\Alonso\\Downloads\\loser_stats1.csv", row.names=FALSE)

```
Shootout Goals
```{r}
dims = dim(shootouts %>% drop_na(Goal)) #dimensions
results = shootouts %>% drop_na(Goal) %>% # drop missing values by Goal variable
    group_by(Goal) %>%  # specify categorical variable
    summarize(Frequency = n()) %>% # return counts / frequencies
    mutate(Percent = paste0(round(Frequency / dims[1] * 100, 2), "%")) # percentages
results$Goal<- gsub(0, "No", results$Goal)
results$Goal<- gsub(1, "Yes", results$Goal)

ggplot(results, aes(x = "", y = Frequency, fill = Goal)) +
    geom_col(position = "stack", orientation = "x") + # this plots a stacked bar chart
     coord_polar(theta = "y") + 
 theme_void() + # these theme removes the lines around the chart and the grey background
    geom_text(aes(label = percent(Frequency/dims[1])), position = position_stack(vjust=0.5))+
  ggtitle("Percentage of Penalties Scored")+
  scale_fill_manual(values=c("#ed1c23","#0660a9"))
```
Shots on Target
```{r}
dims = dim(shootouts %>% drop_na(Goal))
results = shootouts %>% drop_na(Goal) %>% # drop missing values by Goal variable
    group_by(OnTarget) %>%  # specify categorical variable
    summarize(Frequency = n()) %>% # return counts / frequencies
    mutate(Percent = paste0(round(Frequency / dims[1] * 100, 2), "%")) # percentages

results$OnTarget=as.factor(results$OnTarget)
ggplot(results, aes(x = "", y = Frequency, fill = OnTarget)) +
    geom_col(position = "stack", orientation = "x") + # this plots a stacked bar chart
     coord_polar(theta = "y") + 
 theme_void() + # these theme removes the lines around the chart and the grey background
    geom_text(aes(label = percent(Frequency/dims[1])), position = position_stack(vjust=0.5))+
  ggtitle("Shots on Target")+
  scale_fill_manual(values=c("#ed1c23","#0660a9"))
```


```{r}
data<- merge(x=shootouts, y=zones, by="Zone")
data<-data[c(2,5,7,10)]
data$correctlyGuessedSide<- ifelse(data$Keeper==data$Side,"yes","no")
data <- data[data$correctlyGuessedSide=="yes",]


dims = dim(data %>% drop_na(Goal))
results = data %>% drop_na(Goal) %>% # drop missing values by Goal variable
    group_by(Goal) %>%  # specify categorical variable
    summarize(Frequency = n()) %>% # return counts / frequencies
    mutate(Percent = paste0(round(Frequency / dims[1] * 100, 2), "%")) # percentages
results$Goal<- gsub(0, "No", results$Goal)
results$Goal<- gsub(1, "Yes", results$Goal)

ggplot(results, aes(x = "", y = Frequency, fill = Goal)) +
    geom_col(position = "stack", orientation = "x") + # this plots a stacked bar chart
     coord_polar(theta = "y") + 
 theme_void() + # these theme removes the lines around the chart and the grey background
    geom_text(aes(label = percent(Frequency/dims[1])), position = position_stack(vjust=0.5))+
  ggtitle("Goalie and Ball Direction Coincide")+
  scale_fill_manual(values=c("#ed1c23","#0660a9"))
```
```{r}
dims = dim(shootouts %>% drop_na(Foot)) #dimensions
results = shootouts %>% drop_na(Foot) %>% # drop missing values by Goal variable
    group_by(Foot) %>%  # specify categorical variable
    summarize(Frequency = n()) %>% # return counts / frequencies
    mutate(Percent = paste0(round(Frequency / dims[1] * 100, 2), "%")) # percentages
results$Foot<- gsub(0, "No", results$Foot)
results$Foot<- gsub(1, "Yes", results$Foot)

ggplot(results, aes(x = "", y = Frequency, fill = Foot)) +
    geom_col(position = "stack", orientation = "x") + # this plots a stacked bar chart
     coord_polar(theta = "y") + 
 theme_void() + # these theme removes the lines around the chart and the grey background
    geom_text(aes(label = percent(Frequency/dims[1])), position = position_stack(vjust=0.5))+
  ggtitle("Distribution of Kickers Side")+
  scale_fill_manual(values=c("#ed1c23","#0660a9"))
```
```{r}
df<- shootouts
df<- drop_na(df)


# bar plot, with each bar representing 100%
ggplot(df, 
       aes(x = Elimination, 
           fill = Goal)) + 
  geom_bar(position = "fill") +
  labs(y = "Proportion")+
  ggtitle("Elimination PK's vs Non Elimination PKs")+
  scale_fill_manual(values=c("#ed1c23","#0660a9"))
```
```{r}
df<- shootouts
df<- drop_na(df)


# bar plot, with each bar representing 100%
ggplot(df, 
       aes(x = Foot, 
           fill = Goal)) + 
  geom_bar(position = "fill") +
  labs(y = "Proportion")+
  ggtitle("Elimination PK's vs Non Elimination PKs")+
  scale_fill_manual(values=c("#ed1c23","#0660a9"))
```



```{r}
pks_total<- sum(!is.na(shootouts$Zone))
x <- c("col1", "col2","col3")
y <- c("row3","row3","row3", "row2", "row2", "row2", "row1","row1","row1")
third_column <- table(shootouts[, 3])
table <- data.frame(x, y, third_column)
table$percent<- table$Freq/pks_total

ggplot(table, aes(x, y))+
  geom_tile(aes(fill = percent))+
  ggtitle("Total Shots Heat Map")+
  scale_fill_gradient(name = "Percentage",
                      low = "#FFFFFF",
                      high = "#0660a9")+
  theme(axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank()  #remove y axis ticks
        )
```


```{r}
df<- shootouts[shootouts$Goal==1,]
pks_total<- sum(!is.na(df$Zone))

x <- c("col1", "col2","col3")
y <- c("row3","row3","row3", "row2", "row2", "row2", "row1","row1","row1")
third_column <- table(df[, 3])
table <- data.frame(x, y, third_column)
table$percent<- table$Freq/pks_total

ggplot(table, aes(x, y))+
  geom_tile(aes(fill = percent))+
  ggtitle("Goals Heatmap")+
  scale_fill_gradient(name = "Percentage",
                      low = "#FFFFFF",
                      high = "#0660a9")+
  theme(axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank()  #remove y axis ticks
        )
```

```{r}
par(mfrow=c(1,2))  
x <- c("col1", "col2","col3")
y <- c("row3","row3","row3", "row2", "row2", "row2", "row1","row1","row1")

#Left
df<- shootouts[shootouts$Foot=="L",]
pks_total<- sum(!is.na(df$Zone))
third_column <- table(df[, 3])
table <- data.frame(x, y, third_column)
table$percent<- table$Freq/pks_total

#Right
dfr<- shootouts[shootouts$Foot=="R",]
pks_totalr<- sum(!is.na(dfr$Zone))

third_columnr <- table(dfr[, 3])
tabler <- data.frame(x, y, third_columnr)
tabler$percent<- tabler$Freq/pks_totalr

#plots
ggplot(table, aes(x, y))+
  geom_tile(aes(fill = percent))+
  ggtitle("Left Footer's Heatmap")+
  scale_fill_gradient(name = "Percentage",
                      low = "#FFFFFF",
                      high = "#0660a9")+
  theme(axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank()  #remove y axis ticks
        )

ggplot(tabler, aes(x, y))+
  geom_tile(aes(fill = percent))+
  ggtitle("Right Footer's Heatmap")+
  scale_fill_gradient(name = "Percentage",
                      low = "#FFFFFF",
                      high = "#0660a9")+
  theme(axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank()  #remove y axis ticks
        )
```



```{r}

df<- shootouts[shootouts$OnTarget==0,]
pks_total<- sum(!is.na(df$Zone))

x <- c("col1", "col2","col3")
y <- c("row3","row3","row3", "row2", "row2", "row2", "row1","row1","row1")
third_column <- table(df[, 3])
table <- data.frame(x, y, third_column)
table$percent<- table$Freq/pks_total

ggplot(table, aes(x, y))+
  geom_tile(aes(fill = percent))+
  ggtitle("Direction of Shots Not on Target")+
  scale_fill_gradient(name = "Percentage",
                      low = "#FFFFFF",
                      high = "#0660a9")+
  theme(axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank()  #remove y axis ticks
        )
```
```{r}

df<- shootouts[shootouts$OnTarget==1,]
df<-df[df$Goal==0,]
df<-df[df$Foot=="R",]
pks_total<- sum(!is.na(df$Zone))

x <- c("col1", "col2","col3")
y <- c("row3","row3","row3", "row2", "row2", "row2", "row1","row1","row1")
third_column <- table(df[, 3])
table <- data.frame(x, y, third_column)
table$percent<- table$Freq/pks_total

ggplot(table, aes(x, y))+
  geom_tile(aes(fill = percent))+
  ggtitle("Direction of Shots Blocked by Goalie")+
  scale_fill_gradient(name = "Percentage",
                      low = "#FFFFFF",
                      high = "#0660a9")+
  theme(axis.text.x=element_blank(), #remove x axis labels
        axis.ticks.x=element_blank(), #remove x axis ticks
        axis.text.y=element_blank(),  #remove y axis labels
        axis.ticks.y=element_blank()  #remove y axis ticks
        )
```

```{r}
df<- shootouts %>% right_join(kicker, by=c("Game_id","Penalty_Number"))


# Map smoke to colour
ggplot(df, aes(x = Age, colour = Goal)) +
  geom_density()

# Map smoke to fill and make the fill semitransparent by setting alpha
ggplot(df, aes(x = Age, fill = Goal)) +
  geom_density(alpha = .3)+
  ggtitle("Distribution of Age of Penalty Takers")+
  scale_fill_manual(values=c("#ed1c23","#0660a9"))

```
```{r}
df<- shootouts %>% right_join(gk, by=c("Game_id","Team"))
df<- drop_na(df)
# Map smoke to colour
ggplot(df, aes(x = Age, colour = Goal)) +
  geom_density()

# Map smoke to fill and make the fill semitransparent by setting alpha
ggplot(df, aes(x = Age, fill = Goal)) +
  geom_density(alpha = .3)+
  ggtitle("Distribution of Age of Goal Keepers")+
  scale_fill_manual(values=c("#ed1c23","#0660a9"))

```
```{r}
data<- merge(x=shootouts, y=zones, by="Zone")
data<- data[-c(1,5,6,7,11)]
data<- merge(x=data, y=kicker, by=c("Game_id","Team", "Penalty_Number" ))
data<- data[-c(1,2,7,8,9)]

# Define the control using a random forest selection function
control <- rfeControl(functions = rfFuncs, # random forest
                      method = "repeatedcv", # repeated cv
                      repeats = 5, # number of repeats
                      number = 10) # number of folds
x <- data[-c(4)]

y <- data$Side

# Training: 80%; Test: 20%
set.seed(2021)
inTrain <- createDataPartition(y, p = .80, list = FALSE)[,1]

x_train <- x[ inTrain, ]
x_test  <- x[-inTrain, ]

y_train <- y[ inTrain]
y_test  <- y[-inTrain]


# Run RFE
result_rfe1 <- rfe(x = x_train, 
                   y = y_train, 
                   sizes = c(1:13),
                   rfeControl = control)

# Print the results
result_rfe1

# Print the selected features
predictors(result_rfe1)

# Print the results visually
ggplot(data = result_rfe1, metric = "Accuracy") + theme_bw()
ggplot(data = result_rfe1, metric = "Kappa") + theme_bw()
predictors(result_rfe1)
```


```{r}
data<- merge(x=shootouts, y=zones, by="Zone")
data<- data[-c(1,5,6,7,11)]
data<- merge(x=data, y=kicker, by=c("Game_id","Team", "Penalty_Number" ))
data<- data[-c(1,2,7,9)]

# data<- merge(x=shootouts, y=zones, by="Zone")
# data<- data[c(4,10)]


set.seed(101)
index = createDataPartition(data$Side, p = 0.8, list = F )
train = data[index,]
validation = data[-index,]

levels(train$Side) <- make.names(levels(factor(train$Side)))
levels(validation$Side) <- make.names(levels(factor(validation$Side)))

# Setting up train controls
repeats = 3
numbers = 10
tunel = 10

set.seed(1234)
defaultW <- getOption("warn")
options(warn = -1)

x = trainControl(method = "repeatedcv",
                 number = numbers,
                 repeats = repeats,
                 classProbs = TRUE)

model1 <- train(Side~. , data = train, method = "knn",
               preProcess = c("center","scale"),
               trControl = x,
               metric = "ROC",
               tuneLength = tunel)
model1
```
```{r}
plot(model1)
```
```{r}
# Validation
valid_pred <- predict(model1,validation, type = "raw")

#Creating confusion matrix
confusion_Matrix_results <- confusionMatrix(data=valid_pred, reference = validation$Side)

confusion_Matrix_results

importance <- varImp(model1, scale=FALSE)

plot(importance)
```


```{r}
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(PimaIndiansDiabetes[,1:8], PimaIndiansDiabetes[,9], sizes=c(1:8), rfeControl=control)
# summarize the results
print(results)
# list the chosen features
predictors(results)
# plot the results
plot(results, type=c("g", "o"))
```


```{r}
df<- shootouts %>% right_join(kicker, by=c("Game_id","Penalty_Number"))
df<- shootouts %>% right_join(gk, by=c("Game_id","Team"))
df<- shootouts %>% right_join(zones, by="Zone")
df<- drop_na(df)



model <- glm(Goal ~.,family=binomial(link='logit'),data=df)
summary(model)



# Compute the model
model <- lm(Zone_Description~ Foot, data = df)
summary(model)$coef



one.way <- aov(Zone_Description ~ Foot, data = df)
summary(one.way)


one.way <- aov(Elimination ~ Height, data = df)
summary(one.way)

interaction <- aov(Goal ~ Foot*Age, data = df)

summary(interaction)

interaction <- aov(Zone ~ Foot*Elimination, data = df)
summary(interaction)
```



```{r}
df<- drop_na(df)

regressor <- randomForest(formula = Side ~ ., data = df, importance=TRUE) # fit the random forest with default parameter
varImp(regressor, scale=FALSE) # get variable importance, based on mean decrease in accuracy




```

```{r}
df$Zone<- as.factor(df$Zone)
fit <- train(Goal ~ .,
             data = df,
             method = 'knn')

```
